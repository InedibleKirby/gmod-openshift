#!/bin/bash

# Default values
NAME=""
SIZE=""

# Parse command line arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -n|--name) NAME="$2"; shift ;;
        -s|--size) SIZE=$(echo "$2" | tr '[:upper:]' '[:lower:]'); shift ;;
        *) echo "Unknown parameter passed: $1"; echo "Usage: buildstorage --name/-n <name> --size/-s <size>"; exit 1 ;;
    esac
    shift
done

# Validate inputs
if [[ -z "${NAME}" || -z "${SIZE}" ]]; then
    echo "Usage: buildstorage --name/-n <name> --size/-s <size>"
    exit 1
fi

# Check if user is logged into an OpenShift cluster
if ! oc whoami &> /dev/null; then
    echo "You are not logged into an OpenShift cluster."
    read -p "Would you like to log in now? (y/n) " choice
    if [[ "$choice" == "y" || "$choice" == "Y" ]]; then
        oc login
        if [ $? -ne 0 ]; then
            echo "Login failed. Exiting."
            exit 1
        fi
    else
        echo "Please log in and try again."
        exit 1
    fi
fi

# Validate name
if [[ ! "${NAME}" =~ ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$ ]]; then
    echo "Invalid name. Must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character."
    exit 1
fi

# Ensure name isn't too long (maximum valid length for resource names in Kubernetes is 253 characters)
if [[ ${#NAME} -gt 253 ]]; then
    echo "Name is too long. Maximum length is 253 characters."
    exit 1
fi

# Validate and normalize size
if [[ "${SIZE}" =~ ^([0-9]+)([kKmMgG])([iI]?)([bB]?)$ ]]; then
    VALUE="${BASH_REMATCH[1]}"
    UNIT="${BASH_REMATCH[2]}"
    I_SUFFIX="${BASH_REMATCH[3]}"

    case "${UNIT}${I_SUFFIX}" in
        [kK]|[kK][iI]|[kK][bB]) SIZE="${VALUE}Ki" ;;
        [mM]|[mM][iI]|[mM][bB]) SIZE="${VALUE}Mi" ;;
        [gG]|[gG][iI]|[gG][bB]) SIZE="${VALUE}Gi" ;;
        *) 
            echo "Invalid size unit."
            exit 1
            ;;
    esac
else
    echo "Invalid size. Must be a positive number followed by a valid size unit (K, KB, Ki, M, MB, Mi, G, GB, Gi)."
    exit 1
fi

# Create PV and PVC using oc command
oc apply -f - <<EOF
apiVersion: v1
kind: PersistentVolume
metadata:
  name: ${NAME}-pv
spec:
  capacity:
    storage: ${SIZE}
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /data/${NAME}-volume  # This is an example using hostPath. Modify as needed.
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ${NAME}-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: ${SIZE}
EOF

echo "PV and PVC created successfully!"
