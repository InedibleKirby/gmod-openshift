#!/bin/bash

source ./buildstorage.conf

function display_help() {
    local command="$1"

    case $command in
        setup)
            echo "Usage: buildstorage setup"
            echo
            echo "Setup environment variables for buildstorage."
            ;;

        new)
            echo "Usage: buildstorage new [OPTIONS]"
            echo
            echo "Create a new PersistentVolume (PV) and PersistentVolumeClaim (PVC) in OpenShift."
            echo "Options:"
            echo "  -n, --name NAME       Name for the PV and PVC. The created PV will have '-pv' appended, and the PVC will have '-pvc' appended."
            echo "  -s, --size SIZE       Size for the PV and PVC (e.g., 50Gi)."
            echo "  -h, --help            Display this help message and exit."
            echo
            echo "Example:"
            echo "  buildstorage new --name myresource --size 50Gi"
            ;;
        
        resync)
            echo "Usage: buildstorage resync"
            echo
            echo "Scan every PVC in the current namespace. If a PVC does not have an associated PV, create a PV with the storage class environment variable. The PV will match the size of the PVC."
            ;;

	settings)
            echo "Usage: buildstorage settings"
            echo
            echo "Displays the current settings of environment variables set by buildstorage setup."
            ;;

        *)
            echo "Usage: buildstorage COMMAND [OPTIONS]"
            echo
            echo "Commands:"
            echo "  setup                 Setup environment variables for buildstorage. Must be run BEFORE any other commands such as new or resync"
            echo "  new                   Create a new PersistentVolume (PV) and PersistentVolumeClaim (PVC) in OpenShift."
            echo "  resync                Scan every PVC in the namespace. If a PVC does not have an associated PV, create a PV with the same size."
	    echo "  settings     	  Display the current value of evironment variables."
            echo "  -h, --help            Display this help message and exit."
            ;;
    esac
    exit 0
}

function process_setup_command() {
    local input_storage_class
    local config_file="./buildstorage.conf"

    echo "Enter the name of the StorageClass:"
    read input_storage_class

    # Validate the entered storage class
    if is_valid_storage_class "$input_storage_class"; then
        # Check if config file exists. If not, create it.
        if [ ! -f "$config_file" ]; then
            touch "$config_file"
        fi

        # Write the STORAGE_CLASS_NAME to the config file
        echo "STORAGE_CLASS_NAME='$input_storage_class'" > "$config_file"
        echo "Storage class set to: $input_storage_class"
    else
        echo "Error: Invalid StorageClass name. Please enter a valid StorageClass name."
        return 1
    fi

    source ./buildstorage.conf
}

function process_settings_command() {
    echo "Current BuildStorage Environment Settings:"
    echo "Storage Class Name: ${STORAGE_CLASS_NAME:-Not Set}"
    # Add similar lines for other environment variables if they exist
}

function process_new_command() {
    # Default values
    NAME=""
    SIZE=""

    # Parse command line arguments for 'new' command
    while [[ "$#" -gt 0 ]]; do
        case $1 in
            -n|--name) NAME="$2"; shift ;;
            -s|--size) SIZE=$(echo "$2" | tr '[:upper:]' '[:lower:]'); shift ;;
            -h|--help) display_help "new" ;;
            *) echo "Unknown parameter passed: $1"; exit 1 ;;
        esac
        shift
    done

    # Validate inputs
    if [[ -z "${NAME}" && -z "${SIZE}" ]]; then
        echo "Usage: buildstorage new --name <name> --size <size>"
        exit 1
    elif [[ -z "${NAME}" ]]; then
        echo "Error: Missing name. Please provide a name using --name or -n flag. Consult 'buildstorage -h' for more info."
        exit 1
    elif [[ -z "${SIZE}" ]]; then
        echo "Error: Missing size. Please provide a size using --size or -s flag. Consult 'buildstorage -h' for more info."
        exit 1
    fi

    # Validate name
    if [[ ! "${NAME}" =~ ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$ ]]; then
        echo "Invalid name. Must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character."
        exit 1
    fi
    
    # Ensure name isn't too long (maximum valid length for resource names in Kubernetes is 253 characters)
    if [[ ${#NAME} -gt 253 ]]; then
        echo "Name is too long. Maximum length is 253 characters."
        exit 1
    fi
    
    # Validate and normalize size
    if [[ "${SIZE}" =~ ^([0-9]+)([kKmMgG])([iI]?)([bB]?)$ ]]; then
        VALUE="${BASH_REMATCH[1]}"
        UNIT="${BASH_REMATCH[2]}"
        I_SUFFIX="${BASH_REMATCH[3]}"
    
        case "${UNIT}${I_SUFFIX}" in
            [kK]|[kK][iI]|[kK][bB]) SIZE="${VALUE}Ki" ;;
            [mM]|[mM][iI]|[mM][bB]) SIZE="${VALUE}Mi" ;;
            [gG]|[gG][iI]|[gG][bB]) SIZE="${VALUE}Gi" ;;
            *) 
                echo "Invalid size unit."
                exit 1
                ;;
        esac
    else
        echo "Invalid size. Must be a positive number followed by a valid size unit (K, KB, Ki, M, MB, Mi, G, GB, Gi)."
        exit 1
    fi
    
    # Check if the provided storage class exists
    if ! oc get sc $STORAGE_CLASS_NAME &> /dev/null; then
        echo "Error: The '$STORAGE_CLASS_NAME' storage class does not exist in the cluster."
        exit 1
    fi
    
    # Check if a PV with the given name already exists
    if oc get pv "${NAME}-pv" &> /dev/null; then
        echo "Error: A PersistentVolume with the name '${NAME}-pv' already exists."
        exit 1
    fi
    
    # Check if a PVC with the given name already exists
    if oc get pvc "${NAME}-pvc" &> /dev/null; then
        echo "Error: A PersistentVolumeClaim with the name '${NAME}-pvc' already exists."
        exit 1
    fi
    
    # Create PV and PVC using oc command and handle potential errors
    if ! OUTPUT=$(oc apply -f - <<EOF
apiVersion: v1
kind: PersistentVolume
metadata:
  name: ${NAME}-pv
  labels:
    kubernetes.io/hostname: ac-1f-6b-73-2d-c7
    storage.openshift.com/local-volume-owner-name: $STORAGE_CLASS_NAME
    storage.openshift.com/local-volume-owner-namespace: openshift-local-storage
    storage.openshift.com/owner-kind: LocalVolume
    storage.openshift.com/owner-name: $STORAGE_CLASS_NAME
    storage.openshift.com/owner-namespace: openshift-local-storage
  annotations:
    pv.kubernetes.io/provisioned-by: local-volume-provisioner-ac-1f-6b-73-2d-c7
    storage.openshift.com/device-id: nvme-Samsung_SSD_980_PRO_2TB_S6B0NL0W312900F
    storage.openshift.com/device-name: nvme0n1
spec:
  capacity:
    storage: ${SIZE}
  local:
    path: /mnt/local-storage/$STORAGE_CLASS_NAME/nvme-Samsung_SSD_980_PRO_2TB_S6B0NL0W312900F
    fsType: ext4
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete
  storageClassName: $STORAGE_CLASS_NAME
  volumeMode: Filesystem
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - ac-1f-6b-73-2d-c7
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ${NAME}-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: ${SIZE}
  storageClassName: $STORAGE_CLASS_NAME
  volumeName: ${NAME}-pv
    
EOF
    ); then
        echo "Error applying the configuration:"
        echo "${OUTPUT}"
        exit 1
    fi
    
    echo "PV and PVC created successfully!"
}

function process_resync_command() {

    # If -h or --help flag is detected, display the help information and exit
    if [[ "$1" == "-h" || "$1" == "--help" ]]; then
        echo "Usage: buildstorage resync [OPTIONS]"
        echo ""
        echo "Resynchronizes PVCs in the current namespace. For any PVC that doesn't have a bound PV, a new PV is created and the PVC is updated to bind to that PV."
        echo ""
        echo "Options:"
        echo "  -h, --help    Display this help message and exit"
        echo ""
        return 0
    fi

    # Get list of PVCs in the current namespace
    PVCs=$(oc get pvc -o=jsonpath='{range .items[*]}{.metadata.name} {.spec.resources.requests.storage} {.spec.accessModes} {.spec.volumeName} {"\n"}{end}')

    # Process each PVC
    while read -r pvc_name pvc_size pvc_access_mode pvc_volume; do   
        if [ -z "$pvc_volume" ]; then
            echo "PVC $pvc_name does not have an associated PV. Attempting to create a PV..."
			
			printf -v pvc_access_mode_string "%s\n" "${pvc_access_mode[@]}"
			pvc_access_mode_string=${pvc_access_mode_string%?:}
			pvc_access_mode_string=$(echo $pvc_access_mode_string  | cut -c3- | rev | cut -c3- | rev)
            
            # Create a PV for the PVC
            pv_name="${pvc_name}-pv"
            if create_pv_for_pvc $pv_name $pvc_size $pvc_access_mode_string; then
                # Update PVC with volumeName set to the new PV
                oc patch pvc $pvc_name -p '{"spec":{"volumeName":"'$pv_name'"}}'
                echo "PVC $pvc_name updated to bind to PV $pv_name."
            else
                echo "Failed to create PV for PVC $pvc_name. Skipping PVC update."
            fi
        fi
    done <<< "$PVCs"
}

function create_pv_for_pvc() {
    local pv_name="$1"
    local pvc_size="$2"
    local pvc_access_mode_string="$3"

    # Create a PV for the PVC with a specific label
    oc apply -f - <<EOF
apiVersion: v1
kind: PersistentVolume
metadata:
  name: ${pv_name}
  labels:
    storage.openshift.com/local-volume-owner-name: $STORAGE_CLASS_NAME
spec:
  capacity:
    storage: $pvc_size
  accessModes:
    - ${pvc_access_mode_string}
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - ac-1f-6b-73-2d-c7
  persistentVolumeReclaimPolicy: Delete
  storageClassName: $STORAGE_CLASS_NAME
  local:
    path: /path/to/storage/directory
  volumeMode: Filesystem
EOF
}

function is_valid_storage_class() {
    local input_storage_class=$1
    local valid_classes

    # Fetch all available storage classes
    valid_classes=$(oc get storageclass -o=jsonpath='{.items[*].metadata.name}')

    # Check if the input is in the list of valid storage classes
    if [[ $valid_classes =~ (^|[[:space:]])$input_storage_class($|[[:space:]]) ]]; then
        return 0 # 0 is success in bash, meaning the storage class is valid
    else
        return 1 # Non-zero return value indicates failure/validation error
    fi
}

function are_envs_set() {
    # Check if STORAGE_CLASS_NAME is set
    if [[ -z "$STORAGE_CLASS_NAME" ]] && [[ "$1" != "setup" ]]; then
	echo "StorageClass is not set. Please run 'buildstorage setup' first."
	exit 1
    fi
}

# Check if oc command exists
if ! command -v oc &> /dev/null; then
    echo "The 'oc' command is not found. Please ensure you have the OpenShift CLI installed."
    exit 1
fi

# Trap to handle script interruptions
trap "echo 'Script interrupted.'; exit 1" SIGINT SIGTERM

# Check if user is logged into an OpenShift cluster
if ! oc whoami &> /dev/null; then
    echo "You are not logged into an OpenShift cluster."
    read -p "Would you like to log in now? (y/n) " choice
    if [[ "$choice" == "y" || "$choice" == "Y" ]]; then
        oc login
        if [ $? -ne 0 ]; then
            echo "Login failed. Exiting."
            exit 1
        fi
    else
        echo "Please log in and try again."
        exit 1
    fi
fi

# Check the provided command or if --help/-h is directly passed
if [[ "$#" -eq 0 ]]; then
    echo "Error: No command provided."
    display_help
    exit 1
fi

if [[ "$1" == "--help" || "$1" == "-h" ]]; then
    display_help
    exit 0
fi

COMMAND="$1"
shift  # Remove command from the list of arguments

case $COMMAND in
    setup) process_setup_command ;;
    new) 
        if are_envs_set; then
            process_new_command "$@"
        else
            echo "Environment variables are not set. Please run 'buildstorage setup'."
            exit 1
        fi
        ;;
    resync) 
        if are_envs_set; then
            process_resync_command
        else
            echo "Environment variables are not set. Please run 'buildstorage setup'."
            exit 1
        fi
        ;;
    settings) process_settings_command ;;
    *) echo "Unknown command: $COMMAND"; exit 1 
       echo "Usage: buildstorage [setup|new|resync] [--help]"
       exit 1 ;;
esac
